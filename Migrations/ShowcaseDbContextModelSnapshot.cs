// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Service.Showcase.Infrastructure.Databases.Showcases;

#nullable disable

namespace Service.Showcase.Migrations
{
    [DbContext(typeof(ShowcaseDbContext))]
    partial class ShowcaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Service.Showcase.Infrastructure.Databases.Showcases.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShowcaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShowcaseId");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("Service.Showcase.Infrastructure.Databases.Showcases.Models.Hosting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShowcaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShowcaseId");

                    b.ToTable("Hosting");
                });

            modelBuilder.Entity("Service.Showcase.Infrastructure.Databases.Showcases.Models.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShowcaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShowcaseId");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("Service.Showcase.Infrastructure.Databases.Showcases.Models.Showcase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MajorVersion")
                        .HasColumnType("int");

                    b.Property<int>("MinorVersion")
                        .HasColumnType("int");

                    b.Property<int>("PatchVersion")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Showcases");
                });

            modelBuilder.Entity("Service.Showcase.Infrastructure.Databases.Showcases.Models.Feature", b =>
                {
                    b.HasOne("Service.Showcase.Infrastructure.Databases.Showcases.Models.Showcase", "Showcase")
                        .WithMany("Features")
                        .HasForeignKey("ShowcaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Showcase");
                });

            modelBuilder.Entity("Service.Showcase.Infrastructure.Databases.Showcases.Models.Hosting", b =>
                {
                    b.HasOne("Service.Showcase.Infrastructure.Databases.Showcases.Models.Showcase", "Showcase")
                        .WithMany("Hostings")
                        .HasForeignKey("ShowcaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Showcase");
                });

            modelBuilder.Entity("Service.Showcase.Infrastructure.Databases.Showcases.Models.Sector", b =>
                {
                    b.HasOne("Service.Showcase.Infrastructure.Databases.Showcases.Models.Showcase", "Showcase")
                        .WithMany("Sectors")
                        .HasForeignKey("ShowcaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Showcase");
                });

            modelBuilder.Entity("Service.Showcase.Infrastructure.Databases.Showcases.Models.Showcase", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Hostings");

                    b.Navigation("Sectors");
                });
#pragma warning restore 612, 618
        }
    }
}
